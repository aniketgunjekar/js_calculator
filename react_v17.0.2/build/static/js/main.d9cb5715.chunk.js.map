{"version":3,"sources":["index.js"],"names":["evalCounter","acCounter","Display","formula","current","history","id","length","ReactDOM","render","MyCalculator","document","getElementById","key","Controller","setFormula","setCurrent","setHistory","handleClick","input","test","replace","exp","concat","val","eval","toString","console","log","onClick","useState","href","target"],"mappings":"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","file":"static/js/main.d9cb5715.chunk.js","sourcesContent":["//react import\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { useState } from \"react\";\n\n//import style file\nimport \"./index.scss\";\n\n//React App --\n//react 17.0.2 requires variables declared before rendering api\nlet evalCounter = 0;\nlet acCounter = 0;\n\n// rendering api\nReactDOM.render(<MyCalculator />, document.getElementById(\"root\"));\n\n//display child element --\nfunction Display({ formula, current, history }) {\n  return (\n    <div>\n      <div id=\"mainDisplay\">\n        {evalCounter != 0 && (\n          <p id=\"finalExp\">{history[history.length - 1]} =</p>\n        )}\n        <p id=\"display\">{formula}</p>\n      </div>\n      <p id=\"currentDisplay\">{current}</p>\n    </div>\n  );\n}\n\n//input child element --\nlet key = 0;\nfunction Controller({\n  formula,\n  setFormula,\n  current,\n  setCurrent,\n  history,\n  setHistory\n}) {\n  function handleClick(input) {\n    //current states logic    -----   \"current\" state   -----\n    //arithmatic operator test on current\n    if (/[\\*\\/\\+\\-]/.test(input)) {\n      setCurrent(input);\n    }\n    //digit input handler\n    if (/\\d/.test(input)) {\n      if (current == \"0\") {\n        setCurrent(input);\n      } else if (evalCounter != 0) {\n        setCurrent(input);\n      } else if (/[\\*\\/\\+\\-]/.test(current)) {\n        setCurrent(input);\n      } else {\n        setCurrent(current + input);\n      }\n    }\n    //decimal handler\n    if (input == \".\") {\n      if (/\\./.test(current)) {\n        return;\n      } else if (/[\\*\\/\\+\\-]/.test(current)) {\n        setCurrent(\"0\" + input);\n      } else if (evalCounter != 0) {\n        setCurrent(\"0\" + input);\n      } else {\n        setCurrent(current + input);\n      }\n    }\n    //wipe[ac] handler\n    if (input == \"AC\") {\n      setCurrent(\"0\");\n    }\n\n    //formula logic   -----   \"formula\" state   -----\n    //[0-9] input handler\n    if (/\\d/.test(input)) {\n      acCounter = 0; // reset ac button\n      if (formula == \"0\") {\n        setFormula(input);\n      } else if (evalCounter != 0) {\n        setFormula(input);\n        evalCounter = 0; //reset evalCouter with dependency in current digit handler\n      } else {\n        setFormula(formula + input);\n      }\n    }\n    //decimal point handler\n    if (input == \".\") {\n      acCounter = 0; // reset ac button\n      if (/\\./.test(current)) {\n        return;\n      } else if (/[\\*\\/\\+\\-]$/.test(formula)) {\n        setFormula(formula + \"0\" + input);\n      } else if (evalCounter != 0) {\n        setFormula(\"0\" + input);\n        evalCounter = 0; //reset\n      } else {\n        setFormula(formula + input);\n      }\n    }\n    //multiplication, division, addition formula logic handler\n    if (/[\\*\\/\\+]/.test(input)) {\n      evalCounter = 0; //reset evalCounter\n      acCounter = 0; // reset ac button\n      if (/([\\*\\/\\+\\-][\\-])$/.test(formula)) {\n        setFormula(formula.replace(/([\\*\\/\\+\\-][\\-])$/, input));\n      } else if (/[\\*\\/\\+\\-]$/.test(formula)) {\n        setFormula(formula.replace(/[\\*\\/\\+\\-]$/, input));\n      } else {\n        setFormula(formula + input);\n      }\n    }\n    //subtraction handler\n    if (input == \"-\") {\n      evalCounter = 0; //reset evalCounter\n      acCounter = 0; // reset ac button\n      if (/([\\*\\/\\+\\-][\\-])$/.test(formula)) {\n        return;\n      } else {\n        setFormula(formula + input);\n      }\n    }\n    //handle formula,current evaluation\n    if (input == \"=\") {\n      //  * NOTES\n      //  ** calls to setstate are batched by react handlers to prevent multiple renders\n      //  ** this causes asynchrounous calls to setState or useState hooks\n      //  ** which disrupts the functionality of component if it has synchrounous dependency\n      //  ** to resolve this\n      //  ** use a variable to keep the memory of updates until you finally call the setState with the finalized value like done below;\n      //  ** or use updater functions (arrow/anonymous functions) [mentioned in docs]\n      //  ** or use flushsync() [https://reactjs.org/docs/react-dom.html#flushsync]\n\n      evalCounter++; // this variable keeps track of evalute operator presses which is required by most of the programme.\n      let exp = formula; // tentatively stores the memory and updates of formula state to prevent batched renders.\n      if (evalCounter == 1) {\n        // this condition ensures that evaluate operator runs once cosecutively.\n        if (/[\\*\\/\\+\\-\\.]+$/.test(formula)) {\n          // setFormula(formula.replace(/[\\*\\/\\+\\-\\.]$/, \"\"));  // batched call need promise or settimeout\n          exp = exp.replace(/[\\*\\/\\+\\-\\.]+$/, \"\"); // ensures synchronous behaviour\n        }\n        if (/[\\-][\\-]/.test(formula)) {\n          // setFormula(formula.replace(/[\\-][\\-]/, \"+\"));  // batched call need promise or settimeout\n          exp = exp.replace(/[\\-][\\-]/, \"+\"); // ensures synchronous behaviour\n        }\n        setHistory(\n          history.concat(\n            <span key={key++}>\n              <i>\n                step{key + 1}\n                {`->`}&#160;&#160;&#160;&#160;\n              </i>\n              {exp}\n            </span>\n          )\n        );\n        // setFormula(new String(eval(formula)));\n        // setCurrent(new String(eval(formula)));\n        // setFormula(`${eval(formula)}`);\n        let val = eval(exp).toString();\n        console.log(val);\n        setFormula(val);\n        setCurrent(val);\n      }\n    }\n    //wipe[ac] handler\n    if (input == \"AC\") {\n      if (acCounter == 0) {\n        evalCounter = 0;\n        acCounter++;\n        setFormula(\"0\");\n        setHistory(history.concat(<span key={key++}>--All Clear--</span>));\n      }\n    }\n  }\n\n  return (\n    <div id=\"controller\">\n      <p id=\"clear\" onClick={() => handleClick(\"AC\")}>\n        AC\n      </p>\n      <p id=\"divide\" onClick={() => handleClick(\"/\")}>\n        /\n      </p>\n      <p id=\"multiply\" onClick={() => handleClick(\"*\")}>\n        X\n      </p>\n      <p id=\"seven\" onClick={() => handleClick(\"7\")}>\n        7\n      </p>\n      <p id=\"eight\" onClick={() => handleClick(\"8\")}>\n        8\n      </p>\n      <p id=\"nine\" onClick={() => handleClick(\"9\")}>\n        9\n      </p>\n      <p id=\"subtract\" onClick={() => handleClick(\"-\")}>\n        -\n      </p>\n      <p id=\"four\" onClick={() => handleClick(\"4\")}>\n        4\n      </p>\n      <p id=\"five\" onClick={() => handleClick(\"5\")}>\n        5\n      </p>\n      <p id=\"six\" onClick={() => handleClick(\"6\")}>\n        6\n      </p>\n      <p id=\"add\" onClick={() => handleClick(\"+\")}>\n        +\n      </p>\n      <p id=\"one\" onClick={() => handleClick(\"1\")}>\n        1\n      </p>\n      <p id=\"two\" onClick={() => handleClick(\"2\")}>\n        2\n      </p>\n      <p id=\"three\" onClick={() => handleClick(\"3\")}>\n        3\n      </p>\n      <p id=\"equals\" onClick={() => handleClick(\"=\")}>\n        =\n      </p>\n      <p id=\"zero\" onClick={() => handleClick(\"0\")}>\n        0\n      </p>\n      <p id=\"decimal\" onClick={() => handleClick(\".\")}>\n        .\n      </p>\n    </div>\n  );\n}\n\n//parent app --\nfunction MyCalculator() {\n  const [formula, setFormula] = useState(\"0\");\n  const [current, setCurrent] = useState(\"0\");\n  const [history, setHistory] = useState([\"\"]);\n\n  return (\n    <div id=\"background\">\n      <div id=\"calculator\">\n        <Display formula={formula} current={current} history={history} />\n        <Controller\n          formula={formula}\n          setFormula={setFormula}\n          current={current}\n          setCurrent={setCurrent}\n          history={history}\n          setHistory={setHistory}\n        />\n      </div>\n\n      {history.length >= 2 && (\n        <div id=\"history\">\n          <p>history</p>\n          <div id=\"scrollhistory\">{history}</div>\n        </div>\n      )}\n\n      <div id=\"footer\">\n        <p id=\"credit\">Designed and Coded By</p>\n        <p id=\"author\">\n          <a href=\"https://github.com/aniketgunjekar\" target=\"_blank\">\n            Aniket Gunjekar\n          </a>\n        </p>\n      </div>\n    </div>\n  );\n}\n"],"sourceRoot":""}